%YAML 1.2
---
name: Protocol Buffer (TEXT)
file_extensions:
  - pb.txt
  - proto.text
  - textpb
  - pbtxt
  - prototxt
scope: text.prototxt
variables:
  stringEscape: '(?:\\(?:[''"\\/bfnrt]|[0-9]{3}))'
  field_name: '\b([A-Za-z][A-Za-z0-9_]*)\b'
  integer: '(?:\+|-)?(?:0|[1-9]\d*)'
  exp: '(?i:e(?:\+|-)?{{integer}})'

contexts:
  prototype:
    - include: comments

  or_pop:
    - match: '(?=[\S])'
      comment: Pop if nothing matched
      pop: true

  main:
    - include: field_message
    - include: field

  comments:
    - match: '#'
      scope: punctuation.definition.comment.begin.prototxt
      push:
        - meta_scope: comment.line.prototxt
        - match: '$'
          pop: true

  field_message:
    - match: '{{field_name}}(:?)\s*(\{|<)'
      captures:
        1: variable.other.member.prototxt
        2: punctuation.separator.dictionary.key-value.prototxt
        3: punctuation.definition.dictionary.begin.prototxt
      push:
        - meta_scope: meta.message.prototxt
        - match: '\}|>'
          scope: punctuation.definition.dictionary.end.prototxt
          pop: true
        - include: field_message
        - include: field

  field_value_or_pop:
    - include: constant
    - include: stringDoubleMultiline
    - include: stringSingleMultiline
    - include: enum_value
    - include: number
    - include: array
    - include: or_pop

  array:
    - match: '\['
      scope: punctuation.definition.array.begin.prototxt
      set:
        - match: '\]'
          scope: punctuation.definition.array.end.prototxt
          pop: true
        - match: \,
          scope: punctuation.separator.array.prototxt
        - match: (?=\S)
          push: field_value_or_pop

  optionalComma:
    - match: \,
      scope: punctuation.separator.prototxt
      pop: true
    - include: or_pop

  field:
    - match: '{{field_name}}\s*(:)'
      captures:
        1: variable.other.member.prototxt
        2: punctuation.separator.key-value.prototxt
      push:
        - optionalComma
        - field_value_or_pop

  constant:
    - match: \b(?:true|false|null)\b
      scope: constant.language.prototxt
      pop: true

  number:
    - match: |-
        (?xi:
          {{integer}}?\.\d+{{exp}}?(f?)  # literal with a dot: .3 .3e+4 1.3 1.3f
          |{{integer}}(f)                # literal with a 'f': 1f
          |{{integer}}{{exp}}(f?)        # literal with an exp: .3e+4 1e-3 1e3f
        )\b
      scope: constant.numeric.float.prototxt
      captures:
        1: punctuation.definition.numeric.float.prototxt
        2: punctuation.definition.numeric.float.prototxt
        3: punctuation.definition.numeric.float.prototxt
      pop: true
    - match: '{{integer}}\b'
      scope: constant.numeric.integer.prototxt
      pop: true
    - match: '(0)[0-8]+\b'
      scope: constant.numeric.octal.prototxt
      captures:
        1: punctuation.definition.numeric.octal.prototxt
      pop: true
    - match: '(0[xX])[0-9A-Fa-f]+\b'
      scope: constant.numeric.hex.prototxt
      captures:
        1: punctuation.definition.numeric.hex.prototxt
      pop: true

  enum_value:
    - match: '{{field_name}}'
      scope: constant.numeric.enum.prototxt
      pop: true

  stringDoubleMultiline:
    - match: '"'
      scope: punctuation.definition.string.begin.prototxt
      set:
        - meta_scope: string.quoted.double.prototxt
        - meta_include_prototype: false
        - match: '{{stringEscape}}'
          scope: constant.character.escape.prototxt
        - match: \\.
          scope: invalid.illegal.unrecognized-string-escape.prototxt
        - match: '"'
          scope: punctuation.definition.string.end.prototxt
          set:
            - include: stringDoubleMultiline
            - include: or_pop
  stringSingleMultiline:
    - match: "'"
      scope: punctuation.definition.string.quoted.single.begin.prototxt
      set:
        - meta_scope: string.quoted.single.prototxt
        - meta_include_prototype: false
        - match: '{{stringEscape}}'
          scope: constant.character.escape.prototxt
        - match: \\.
          # Invalid escapes are only allowed if the field is of kind 'bytes'.
          # But we don't know in the text description if the field is meant to
          # be a string or bytes.
          scope: invalid.illegal.unrecognized-string-escape.prototxt
        - match: "'"
          scope: punctuation.definition.string.quoted.single.end.prototxt
          set:
            - include: stringSingleMultiline
            - include: or_pop
